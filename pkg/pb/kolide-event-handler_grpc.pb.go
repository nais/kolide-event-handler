// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: pkg/pb/kolide-event-handler.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KolideEventHandler_Events_FullMethodName = "/kolide_event_handler.KolideEventHandler/Events"
)

// KolideEventHandlerClient is the client API for KolideEventHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KolideEventHandlerClient interface {
	Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeviceEvent], error)
}

type kolideEventHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewKolideEventHandlerClient(cc grpc.ClientConnInterface) KolideEventHandlerClient {
	return &kolideEventHandlerClient{cc}
}

func (c *kolideEventHandlerClient) Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeviceEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KolideEventHandler_ServiceDesc.Streams[0], KolideEventHandler_Events_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventsRequest, DeviceEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KolideEventHandler_EventsClient = grpc.ServerStreamingClient[DeviceEvent]

// KolideEventHandlerServer is the server API for KolideEventHandler service.
// All implementations must embed UnimplementedKolideEventHandlerServer
// for forward compatibility.
type KolideEventHandlerServer interface {
	Events(*EventsRequest, grpc.ServerStreamingServer[DeviceEvent]) error
	mustEmbedUnimplementedKolideEventHandlerServer()
}

// UnimplementedKolideEventHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKolideEventHandlerServer struct{}

func (UnimplementedKolideEventHandlerServer) Events(*EventsRequest, grpc.ServerStreamingServer[DeviceEvent]) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedKolideEventHandlerServer) mustEmbedUnimplementedKolideEventHandlerServer() {}
func (UnimplementedKolideEventHandlerServer) testEmbeddedByValue()                            {}

// UnsafeKolideEventHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KolideEventHandlerServer will
// result in compilation errors.
type UnsafeKolideEventHandlerServer interface {
	mustEmbedUnimplementedKolideEventHandlerServer()
}

func RegisterKolideEventHandlerServer(s grpc.ServiceRegistrar, srv KolideEventHandlerServer) {
	// If the following call pancis, it indicates UnimplementedKolideEventHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KolideEventHandler_ServiceDesc, srv)
}

func _KolideEventHandler_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KolideEventHandlerServer).Events(m, &grpc.GenericServerStream[EventsRequest, DeviceEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KolideEventHandler_EventsServer = grpc.ServerStreamingServer[DeviceEvent]

// KolideEventHandler_ServiceDesc is the grpc.ServiceDesc for KolideEventHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KolideEventHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kolide_event_handler.KolideEventHandler",
	HandlerType: (*KolideEventHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _KolideEventHandler_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/pb/kolide-event-handler.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KolideEventHandlerClient is the client API for KolideEventHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KolideEventHandlerClient interface {
	Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (KolideEventHandler_EventsClient, error)
}

type kolideEventHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewKolideEventHandlerClient(cc grpc.ClientConnInterface) KolideEventHandlerClient {
	return &kolideEventHandlerClient{cc}
}

func (c *kolideEventHandlerClient) Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (KolideEventHandler_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KolideEventHandler_ServiceDesc.Streams[0], "/kolide_event_handler.KolideEventHandler/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &kolideEventHandlerEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KolideEventHandler_EventsClient interface {
	Recv() (*DeviceEvent, error)
	grpc.ClientStream
}

type kolideEventHandlerEventsClient struct {
	grpc.ClientStream
}

func (x *kolideEventHandlerEventsClient) Recv() (*DeviceEvent, error) {
	m := new(DeviceEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KolideEventHandlerServer is the server API for KolideEventHandler service.
// All implementations must embed UnimplementedKolideEventHandlerServer
// for forward compatibility
type KolideEventHandlerServer interface {
	Events(*EventsRequest, KolideEventHandler_EventsServer) error
	mustEmbedUnimplementedKolideEventHandlerServer()
}

// UnimplementedKolideEventHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedKolideEventHandlerServer struct {
}

func (UnimplementedKolideEventHandlerServer) Events(*EventsRequest, KolideEventHandler_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedKolideEventHandlerServer) mustEmbedUnimplementedKolideEventHandlerServer() {}

// UnsafeKolideEventHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KolideEventHandlerServer will
// result in compilation errors.
type UnsafeKolideEventHandlerServer interface {
	mustEmbedUnimplementedKolideEventHandlerServer()
}

func RegisterKolideEventHandlerServer(s grpc.ServiceRegistrar, srv KolideEventHandlerServer) {
	s.RegisterService(&KolideEventHandler_ServiceDesc, srv)
}

func _KolideEventHandler_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KolideEventHandlerServer).Events(m, &kolideEventHandlerEventsServer{stream})
}

type KolideEventHandler_EventsServer interface {
	Send(*DeviceEvent) error
	grpc.ServerStream
}

type kolideEventHandlerEventsServer struct {
	grpc.ServerStream
}

func (x *kolideEventHandlerEventsServer) Send(m *DeviceEvent) error {
	return x.ServerStream.SendMsg(m)
}

// KolideEventHandler_ServiceDesc is the grpc.ServiceDesc for KolideEventHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KolideEventHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kolide_event_handler.KolideEventHandler",
	HandlerType: (*KolideEventHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _KolideEventHandler_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/pb/kolide-event-handler.proto",
}
